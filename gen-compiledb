#!/bin/sh

if [ "$#" -lt 1 ]; then
  echo "Usage: $0 <build.log>"
  exit 2
fi

if [ ! -f "$1" ]; then
  echo "Build log (\"$1\") not exist."
  exit 2
fi

BUILD_LOG="$1"

# PROFILE=$(grep -m1 "make -f build/Makefile -j[[:digit:]]\+ PROFILE=" "${BUILD_LOG}"); PROFILE=${PROFILE#*PROFILE=}
# PROFILE=${PROFILE%% *}  # trim tail spaces
PROFILE=$(grep -m1 "echo \".*\" > .*\.last_profile" "${BUILD_LOG}")
PROFILE=${PROFILE#*echo \"}
PROFILE=${PROFILE%%\"*}

if [ -z "${PROFILE}" ]; then
  echo "No profile found!"
  exit
fi

echo "generating compile_commands.json.${PROFILE}.nic"
CC=$(grep -m1 "\-o init/main\.o" "${BUILD_LOG}" | tr ' ' '\n' | grep -m1 '.*gcc$')
grep "${CC}" "${BUILD_LOG}" > "${BUILD_LOG}".nic
BUILD_DIR=$(grep -m1 "LINUXDIR=" "${BUILD_LOG}"); BUILD_DIR=${BUILD_DIR#*LINUXDIR=}
compiledb -f -d "${BUILD_DIR}" -p "${BUILD_LOG}".nic -o compile_commands.json."${PROFILE}".nic

# May need to remove gcc option -mabi=lp64 -march=armv7-a
# ~/.config/clangd/config.yaml
#CompileFlags:
#  Remove: [-mabi=lp64, -march=armv7-a]
#

CC_LIST=${CC}

# Utility - generate compiledb for APPs.
# The 1st arg is APP name for BUILD_DIR and the rest args are APP's components.
gen_app_compiledb() {
  if [[ $# -le 2 ]]; then
    exit
  fi

  APP=$1
  shift

  rm -f "${BUILD_LOG}"."${APP}"

  # Iterate each APP components for object files
  for COMPONENT in $@; do
    BUILD_COMPONENT=$(grep -m1 "\-o ${COMPONENT}[[:space:]$]" "${BUILD_LOG}")

    CC=$(echo "${BUILD_COMPONENT}" | tr ' ' '\n' | grep -m1 '.*gcc$')
    found=0
    for x in $CC_LIST; do
      if [[ "${CC}" == "${x}" ]]; then
        found=1
        break
      fi
    done

    if [[ -n "${CC}" ]] && [[ ${found} -eq 0 ]]; then
      CC_LIST="${CC_LIST} ${CC}"
      grep "${CC}" "${BUILD_LOG}" >> "${BUILD_LOG}".nic
    fi

    for x in $(echo "${BUILD_COMPONENT}" | tr ' ' '\n' | grep "\.o$"); do
      grep "\-o ${x}\W" "${BUILD_LOG}".nic >> "${BUILD_LOG}"."${APP}"
    done
  done

  if [[ -f "${BUILD_LOG}"."${APP}" ]]; then
    # Get BUILD_DIR from main APP
    BUILD_DIR=$(grep -m1 "make \-C /.*\W${APP}\W" "${BUILD_LOG}" | sed "s/^.* \-C \([[:alnum:]/._-]*\)\( .*\)\?$/\1/")
    compiledb -d "${BUILD_DIR}" -p "${BUILD_LOG}"."${APP}" -o compile_commands.json."${PROFILE}".nic
    #rm -f "${BUILD_LOG}"."${APP}"
  fi
}

gen_app_compiledb "hostapd" "hostapd" "hostapd_cli"
gen_app_compiledb "wpa_supplicant" "wpa_supplicant" "wpa_cli"
gen_app_compiledb "qosmgmtd" "qosmgmtd" "qm_cli"
gen_app_compiledb "wbd2" "wbd_master" "wbd_slave" "wb_cli" "libwbdshared.so" "libwbdhld.so"

# generate dongle compiledb
# example of BUILD_STR
#-------- Building: config_pcie_fdap_release_airiq from /projects/wlan_sw_ae3/mtzengc/504L02/188.25020/bcmdrivers/broadcom/net/wl/impl83/main/build/dongle/43684b0-ram --------

grep "^-------- Building: " "${BUILD_LOG}" | while read -r PREFIX BUILDING BUILD_TARGET FROM BUILD_BASE POSTFIX; do
  if [ ! -d "${BUILD_BASE}"/"${BUILD_TARGET}" ]; then
	  continue
  fi

  CHIP=${BUILD_BASE##*/}
  CHIP=${CHIP%-*} # remove '-ram' or '-roml'
  CHIP=${CHIP^^}

  [ "$CHIP" = "43684B0" ] && CHIP="43684B"

  echo "generating compile_commands.json.${PROFILE}.${CHIP}"
  CC=$(grep "\-o wlc\.o" "${BUILD_LOG}" | grep "${CHIP}" | tr ' ' '\n' | grep -m1 '.*gcc$')
  grep "^${CC}" "${BUILD_LOG}" | grep "${CHIP}" > "${BUILD_LOG}"."${CHIP}"
  cp -f compile_commands.json."${PROFILE}".nic compile_commands.json."${PROFILE}"."${CHIP}"
  BUILD_DIR="${BUILD_BASE}"/"${BUILD_TARGET}"
  compiledb -d "${BUILD_DIR}" -p "${BUILD_LOG}"."${CHIP}" -o compile_commands.json."${PROFILE}"."${CHIP}"
done
